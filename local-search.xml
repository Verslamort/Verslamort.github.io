<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>my-hello-post</title>
    <link href="/2023/10/04/my-hello-post/"/>
    <url>/2023/10/04/my-hello-post/</url>
    
    <content type="html"><![CDATA[<p><strong>[<strong><strong>学习交流</strong></strong>]</strong> <strong>python</strong> <strong>面试常见的</strong> <strong>25</strong> <strong>个问题</strong></p><p><strong>1. 到底什么是 Python？你可以在回答中与其他技术进行对比</strong></p><p><strong>下面是一些关键点：</strong></p><p> </p><p>Python 是一种解释型语言。这就是说，与 C 语言和 C 的衍生语言不同，Python 代码在</p><p>运行之前不需要编译。其他解释型语言还包括 PHP 和 Ruby。</p><p> </p><p>Python 是动态类型语言，指的是你在声明变量时，不需要说明变量的类型。你可以直</p><p>接编写类似 x&#x3D;111 和 x&#x3D;”I’m a string”这样的代码，程序不会报错。</p><p> </p><p>Python 非常适合面向对象的编程（OOP），因为它支持通过组合（composition）与继</p><p>承（inheritance）的方式定义类（class）。</p><p>Python 中没有访问说明符（access specifier，类似 C++中的 public 和 private），</p><p>这么设计的依据是“大家都是成年人了”。</p><p> </p><p>在 Python 语言中，函数是第一类对象（first-class objects）。这指的是它们可以被指定</p><p>给变量，函数既能返回函数类型，也可以接受函数作为输入。类（class）也是第一类对</p><p>象。</p><p> </p><p>Python 代码编写快，但是运行速度比编译语言通常要慢。好在 Python 允许加入基于 C</p><p>语言编写的扩展，因此我们能够优化代码，消除瓶颈，这点通常是可以实现的。</p><p>numpy 就是一个很好地例子，它的运行速度真的非常快，因为很多算术运算其实并不是</p><p>通过 Python 实现的。</p><p> </p><p>Python 用途非常广泛——网络应用，自动化，科学建模，大数据应用，等等。它也常</p><p>被用作“胶水语言”，帮助其他语言和组件改善运行状况。</p><p> </p><p>Python 让困难的事情变得容易，因此程序员可以专注于算法和数据结构的设计，而不</p><p>用处理底层的细节。</p><p>为什么提这个问题：如果你应聘的是一个 Python 开发岗位，你就应该知道这是门什</p><p>么样的语言，以及它为什么这么酷。以及它哪里不好。</p><p>**2.<strong><strong>什么是</strong> <strong>PEP8</strong></strong>？**PEP8 是一个编程规范，内容是一些关于如何让你的程序更具可读性的建议。</p><p>*<em>3.<strong><strong>什么是</strong> <strong>pickling</strong> <strong>和</strong> <strong>unpickling</strong></strong>？</em>*</p><p>Pickle 模块读入任何 Python 对象，将它们转换成字符串，然后使用 dump 函数将其转储到</p><p>一个文件中——这个过程叫做 pickling。</p><p>反之从存储的字符串文件中提取原始 Python 对象的过程，叫做 unpickling。</p><p><strong>4.Python</strong> <strong>是如何被解释的？</strong></p><p>Python 是一种解释性语言，它的源代码可以直接运行。Python 解释器会将源代码转换成中</p><p>间语言，之后再翻译成机器码再执行。</p><p><strong>5.Python</strong> <strong>是怎样管理内存的？</strong></p><p>Python 的内存管理是由私有 heap 空间管理的。所有的 Python 对象和数据结构都在一个</p><p>私有 heap 中。程序员没有访问该 heap 的权限，只有解释器才能对它进行操作。</p><p>为 Python 的 heap 空间分配内存是由 Python 的内存管理模块进行的，其核心 API 会提供</p><p>一些访问该模块的方法供程序员使用。</p><p>Python 有自带的垃圾回收系统，它回收并释放没有被使用的内存，让它们能够被其他程序</p><p>使用。</p><p>**6.**<strong>有哪些工具可以帮助</strong> <strong>debug</strong> <strong>或做静态分析？</strong></p><p>PyChecker 是一个静态分析工具，它不仅能报告源代码中的错误，并且会报告错误类型和复</p><p>杂度。Pylint 是检验模块是否达到代码标准的另一个工具。</p><p>**7.**<strong>什么是</strong> <strong>Python</strong> <strong>装饰器？</strong>Python 装饰器是 Python 中的特有变动，可以使修改函数变得更容易。</p><p>**8.**<strong>数组和元组之间的区别是什么？</strong></p><p>数组和元组之间的区别：数组内容是可以被修改的，而元组内容是只读的。另外，元组可以</p><p>被哈希，比如作为字典的关键字。</p><p>**9.**<strong>参数按值传递和引用传递是怎样实现的？</strong></p><p>Python 中的一切都是类，所有的变量都是一个对象的引用。引用的值是由函数确定的，因</p><p>此无法被改变。但是如果一个对象是可以被修改的，你可以改动对象。</p><p>**10.**<strong>字典推导式和列表推导式是什么？</strong></p><p>它们是可以轻松创建字典和列表的语法结构。</p><p><strong>11.Python</strong> <strong>都有哪些自带的数据结构？</strong></p><p>Python 自带的数据结构分为可变的和不可变的。可变的有：数组、集合、字典；不可变的</p><p>有：字符串、元组、数。</p><p>**12.**<strong>什么是</strong> <strong>Python</strong> <strong>的命名空间？</strong></p><p>在 Python 中，所有的名字都存在于一个空间中，它们在该空间中存在和被操作——这就是</p><p>命名空间。</p><p>它就好像一个盒子，每一个变量名字都对应装着一个对象。当查询变量的时候，会从该盒子</p><p>里面寻找相应的对象。</p><p><strong>13.Python</strong> <strong>中的</strong> <strong>lambda</strong> <strong>是什么？</strong></p><p>这是一个常被用于代码中的单个表达式的匿名函数。**14.**<strong>为什么</strong> <strong>lambda</strong> <strong>没有语句？</strong></p><p>匿名函数 lambda 没有语句的原因，是它被用于在代码被执行的时候构建新的函数对象并且</p><p>返回。</p><p><strong>15.Python</strong> <strong>中的</strong> <strong>pass</strong> <strong>是什么？</strong></p><p>Pass 是一个在 Python 中不会被执行的语句。在复杂语句中，如果一个地方需要暂时被留白，</p><p>它常常被用于占位符。</p><p><strong>16.Python</strong> <strong>中什么是遍历器？</strong></p><p>遍历器用于遍历一组元素，比如列表这样的容器。</p><p><strong>17.Python</strong> <strong>中的</strong> <strong>unittest</strong> <strong>是什么？</strong></p><p>在 Python 中，unittest 是 Python 中的单元测试框架。它拥有支持共享搭建、自动测试、</p><p>在测试中暂停代码、将不同测试迭代成一组，等等的功能。</p><p>*<em>18.<strong><strong>在</strong> <strong>Python</strong> <strong>中什么是</strong> <strong>slicing</strong></strong>？</em>*</p><p>Slicing 是一种在有序的对象类型中（数组，元组，字符串）节选某一段的语法。</p><p>**19.**<strong>在</strong> <strong>Python</strong> <strong>中什么是构造器？</strong></p><p>生成器是实现迭代器的一种机制。它功能的实现依赖于 yield 表达式，除此之外它跟普通的</p><p>函数没有两样。</p><p><strong>20.Python</strong> <strong>中的</strong> <strong>docstring</strong> <strong>是什么？</strong></p><p>Python 中文档字符串被称为 docstring，它在 Python 中的作用是为函数、模块和类注释</p><p>生成文档。**21.**<strong>如何在</strong> <strong>Python</strong> <strong>中拷贝一个对象？</strong></p><p>如果要在 Python 中拷贝一个对象，大多时候你可以用 copy.copy()或者 copy.deepcopy()。</p><p>但并不是所有的对象都可以被拷贝。</p><p><strong>22.Python</strong> <strong>中的负索引是什么？</strong></p><p>Python 中的序列索引可以是正也可以是负。如果是正索引，0 是序列中的第一个索引，1</p><p>是第二个索引。如果是负索引，（-1）是最后一个索引而（-2）是倒数第二个索引。</p><p>**23.**<strong>如何将一个数字转换成一个字符串？</strong></p><p>你可以使用自带函数 str()将一个数字转换为字符串。如果你想要八进制或者十六进制数，可</p><p>以用 oct()或 hex()。</p><p><strong>24.Xrange</strong> <strong>和</strong> <strong>range</strong> <strong>的区别是什么？</strong></p><p>Xrange 用于返回一个 xrange 对象，而 range 用于返回一个数组。不管那个范围多大，</p><p>Xrange 都使用同样的内存。</p><p><strong>25.Python</strong> <strong>中的模块和包是什么？</strong></p><p>在 Python 中，模块是搭建程序的一种方式。每一个 Python 代码文件都是一个模块，并可</p><p>以引用其他的模块，比如对象和属性。</p><p>一个包含许多 Python 代码的文件夹是一个包。一个包可以包含模块和子文件夹。</p>]]></content>
    
    
    
    <tags>
      
      <tag>hello</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/10/04/hello-world/"/>
    <url>/2023/10/04/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
